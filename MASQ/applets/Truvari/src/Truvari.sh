#!/bin/bash
# Truvari v1.3.2
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of BaseVCF: '$BaseVCF'"
    echo "Value of CompVCF: '$CompVCF'"
    echo "Value of Reference: '$Reference'"
    echo "Value of giabreport: '$giabreport'"
    echo "Value of REFDIST: '$REFDIST'"
    echo "Value of PCTSIM: '$PCTSIM'"
    echo "Value of PCTSIZE: '$PCTSIZE'"
    echo "Value of PCTOVL: '$PCTOVL'"
    echo "Value of typeignore: '$typeignore'"
    echo "Value of gtcomp: '$gtcomp'"
    echo "Value of bSample: '$bSample'"
    echo "Value of cSample: '$cSample'"
    echo "Value of SIZEMIN: '$SIZEMIN'"
    echo "Value of SIZEFILT: '$SIZEFILT'"
    echo "Value of sizemax: '$sizemax'"
    echo "Value of passonly: '$passonly'"
    echo "Value of no_ref: '$no_ref'"
    echo "Value of includebed: '$includebed'"
    echo "Value of multimatch: '$multimatch'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$BaseVCF" -o BaseVCF.vcf.gz
    dx download "$BaseVCFIDX" -o BaseVCF.vcf.gz.tbi

    dx download "$CompVCF" -o CompVCF.vcf.gz
    dx download "$CompVCFIDX" -o CompVCF.vcf.gz.tbi

    dx download "$Reference" -o Reference.fasta

    if [ -n "$includebed" ]
    then
        dx download "$includebed" -o includebed.bed
    fi

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.
    pip install Truvari==v1.3.1
    
    set optionals=""
    if [ "$giabreport" == true ]
    then
        optionals="$optionals --giabreport"
    fi
    if [ -n "$includebed" ]
    then
        optionals="$optionals --includebed include.bed"
    fi
    if [ "$typeignore" == true ]
    then
        optionals="$optionals --typeignore"
    fi
    if [ "$gtcomp" == true ]
    then
        optionals="$optionals --gtcomp"
    fi
    if [ -n "$bSample" ]
    then
        optionals="$optionals --bSample $bSample"
    fi
    if [ -n "$cSample" ]
    then
        optionals="$optionals --cSample $cSample"
    fi
    if [ "$passonly" == true ]
    then
        optionals="$optionals --passonly"
    fi
    if [ -n "$no_ref" ]
    then
        optionals="$optionals --no-ref $no_ref"
    fi
    if [ "$multimatch" == true ]
    then
        optionals="$optionals --multimatch"
    fi
    echo "Optional arguments $optionals"
    truvari -b BaseVCF.vcf.gz \
            -c CompVCF.vcf.gz \
            -f Reference.fasta \
            -o truvari_result \
            -r $REFDIST \
            -p $PCTSIM \
            -P $PCTSIZE \
            -O $PCTOVL \
            -s $SIZEMIN \
            -S $SIZEFILT \
            --sizemax $sizemax \
            $optionals

            
    cd truvari_result
    tar czvf OutputTar.tgz *
    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    OutputTar=$(dx upload OutputTar.tgz --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output OutputTar "$OutputTar" --class=file
}
